.text
.global _start
_start:

movi sp, 0x7FFC
#JTAG UART BASE LOCATED AT 0x10001000 (data found here)
#JTAG UART STATUS LOCATED AT 0x10001004

printchar:
subi sp, sp, 8
stw r3, 4(sp)
stw r4, 0(sp)
movia r3, 0x10001000

pc_loop:
ldwio r4, 4(r3)
andhi r4, r4, 0xFFFF
beq r4, r0, pc_loop
stwio r2, 0(r3)

ldw r3, 4(sp)
ldw r4, 0(sp)
addi sp, sp, 8
ret

getchar:
subi sp, sp, 8
stw r3, 4(sp)
stw r4, 0(sp)
movia r3, 0x10001000

gc_loop:
ldw r4, 0(r3)
andi r2, r4, 0x8000 # (1000 0000 0000 0000)
beq r2, r0, gc_loop
andi r2, r2, 0xFF


ldw r3, 4(sp)
ldw r4, 0(sp)
addi sp, sp, 8
ret

printstring:
subi sp, sp, 12
stw ra, 8(sp)
stw r2, 4(sp)
stw r3, 0(sp)
mov r3, r2
ps_loop:
ldb r2, 0(r3)
beq r2, r0, ps_end
call printchar
addi r3, r3, 1
br ps_loop
ps_end:
ldw ra, 8(sp)
ldw r2, 4(sp)
ldw r3, 0(sp)
addi sp, sp, 12
ret

getstring:
subi sp, sp, 
stw ra, 16(sp)
stw r2, 8(sp)
stw r3, 4(sp)
stw r4, 0(sp)
mov r3, r2
movi r4, 0xA
gs_loop:
call getchar
beq r2, r4, gs_end
stb r2, 0(r3)
addi r3, r3, 1
br gs_loop
gs_end:
movi r2, 0xA
call printchar
ldw ra, 12(sp)
ldw r2, 8(sp)
ldw r3, 4(sp)
ldw r4, 0(sp)
addi sp, sp, 16 
ret
mattbarrett â€” 04/14/2021
.text
.org 0x0000
.global _start
_start:

main:
movi sp, 0x7FFC
movia r2, message
call printstring
movi r2, BUFFER
call getstring

movi r5, 0 #count = 0
movi r4, 0xA
main_loop:
ldb r3, 0(r2)
beq r3, r4, main_end
IF:
movi r7, 'A'
blt r2, r7, else
movi r7, 'Z'
bgt r2, r7, else
then:
addi r5, r5, 1
addi r2, r2, 1
br main_loop
else:
addi r2, r2, 1
br main_loop
main_end:
stw r5, COUNT(r0)
_end:
    break

#--------------------------
.org 0x1000
BUFFER: .byte 80
COUNT: .skip 4
message: .asciz "Type 80 characters or less and Press enter"

printchar:
subi sp, sp, 8
stw r3, 4(sp)
stw r4, 0(sp)
movia r3, 0x10001000

pc_loop:
ldwio r4, 4(r3)
andhi r4, r4, 0xFFFF
beq r4, r0, pc_loop
stwio r2, 0(r3)

ldw r3, 4(sp)
ldw r4, 0(sp)
addi sp, sp, 8
ret

getchar:
subi sp, sp, 8
stw r3, 4(sp)
stw r4, 0(sp)
movia r3, 0x10001000

gc_loop:
ldw r4, 0(r3)
andi r2, r4, 0x8000 # (1000 0000 0000 0000)
beq r2, r0, gc_loop
andi r2, r2, 0xFF


ldw r3, 4(sp)
ldw r4, 0(sp)
addi sp, sp, 8
ret

printstring:
subi sp, sp, 12
stw ra, 8(sp)
stw r2, 4(sp)
stw r3, 0(sp)
mov r3, r2
ps_loop:
ldb r2, 0(r3)
beq r2, r0, ps_end
call printchar
addi r3, r3, 1
br ps_loop
ps_end:
ldw ra, 8(sp)
ldw r2, 4(sp)
ldw r3, 0(sp)
addi sp, sp, 12
ret

getstring:
subi sp, sp, 16
stw ra, 12(sp)
stw r2, 8(sp)
stw r3, 4(sp)
stw r4, 0(sp)
mov r3, r2
movi r4, 0xA
gs_loop:
call getchar
beq r2, r4, gs_end
stb r2, 0(r3)
addi r3, r3, 1
br gs_loop
gs_end:
movi r2, 0xA
call printchar
ldw ra, 12(sp)
ldw r2, 8(sp)
ldw r3, 4(sp)
ldw r4, 0(sp)
addi sp, sp, 16 
ret